# GitHub Action 的名称
name: Ping and Save IP

# 触发工作流程的事件
on:
  # 允许手动触发
  workflow_dispatch:
  # 设置定时任务，每30分钟执行一次
  schedule:
    - cron: '*/30 * * * *'

# 定义一个或多个作业
jobs:
  # 作业的唯一标识符
  ping:
    # 指定作业运行的虚拟环境
    runs-on: ubuntu-latest
    
    # 为此作业设置权限
    # 授予 contents 写入权限，以便 action 可以推送提交
    permissions:
      contents: write

    # 作业中执行的步骤
    steps:
      # 第一步：检出你的仓库代码
      # 这样你的工作流程才能访问仓库内容
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：使用 ping0.cc 从多个地点获取 IP 并保存
      # 添加 User-Agent 头来模拟浏览器访问，防止被屏蔽
      - name: Get IPs from multiple locations using ping0.cc
        run: curl -sL -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36" ping0.cc/cf.090227.xyz > ip.txt

      # 第三步：提交并推送文件到仓库
      - name: Commit and push if changed
        run: |
          # 配置 git 用户名和邮箱
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 将生成的文件添加到暂存区
          git add ip.txt
          
          # 检查是否有文件变动，只有在 ip.txt 内容更新时才进行提交
          # "git diff --staged --quiet" 会在有变动时返回非零值
          if ! git diff --staged --quiet; then
            # 提交变动
            git commit -m "Update multi-location IP report for cf.090227.xyz"
            # 推送到远程仓库
            git push
          else
            # 如果没有变动，则在日志中打印一条消息
            echo "No changes to commit."
          fi
